# 22 "lexer.mll"
 
  open Lexing
  open Parser

  exception Lexing_error of char


  let kwd_tbl = [
    "if",      IF;
    "then",    THEN;
    "else",    ELSE;
    "print",   PRINT;
    "mod",     MOD;
    "in",      IN;
    "var",     VAR;
    "let",     LET;
    "true",    CONST (Cbool true);
    "false",   CONST (Cbool false);
    "int", INT;
    "bool", BOOL
  ]

  let kwd_or_id s = 
  try List.assoc s kwd_tbl with _ -> IDENT s

  let newline lexbuf = 
    let pos = lexbuf.lex_curr_p in 
    lexbuf.lex_curr_p <- 
      {pos with pos_lnum = pos.pos_lnum  + 1; pos_bol = pos.pos_cnum}

# 33 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\228\255\229\255\078\000\231\255\232\255\002\000\003\000\
    \030\000\031\000\241\255\243\255\244\255\245\255\246\255\247\255\
    \248\255\032\000\251\255\088\000\002\000\047\000\255\255\002\000\
    \003\000\249\255\239\255\238\255\236\255\234\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\025\000\255\255\255\255\020\000\018\000\
    \022\000\015\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\005\000\255\255\003\000\002\000\013\000\255\255\255\255\
    \001\000\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\000\000\000\000\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\255\255\255\255\255\255\000\000\024\000\
    \024\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\020\000\022\000\020\000\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \020\000\008\000\020\000\000\000\000\000\000\000\005\000\000\000\
    \016\000\015\000\010\000\012\000\000\000\011\000\000\000\021\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\017\000\018\000\007\000\009\000\006\000\029\000\
    \028\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\027\000\026\000\025\000\023\000\000\000\
    \000\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\014\000\004\000\013\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\020\000\023\000\024\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\020\000\255\255\255\255\255\255\000\000\255\255\
    \000\000\000\000\000\000\000\000\255\255\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
    \007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\008\000\009\000\017\000\021\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\023\000\024\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 61 "lexer.mll"
                ( newline lexbuf; token lexbuf )
# 161 "lexer.ml"

  | 1 ->
# 62 "lexer.mll"
                ( newline lexbuf; token lexbuf )
# 166 "lexer.ml"

  | 2 ->
# 63 "lexer.mll"
                ( token lexbuf )
# 171 "lexer.ml"

  | 3 ->
let
# 64 "lexer.mll"
           id
# 177 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 64 "lexer.mll"
                ( kwd_or_id id )
# 181 "lexer.ml"

  | 4 ->
# 65 "lexer.mll"
                ( SCOL )
# 186 "lexer.ml"

  | 5 ->
# 66 "lexer.mll"
                ( COL )
# 191 "lexer.ml"

  | 6 ->
# 67 "lexer.mll"
                ( SET )
# 196 "lexer.ml"

  | 7 ->
# 68 "lexer.mll"
                ( LP )
# 201 "lexer.ml"

  | 8 ->
# 69 "lexer.mll"
                ( RP )
# 206 "lexer.ml"

  | 9 ->
# 70 "lexer.mll"
                ( LB )
# 211 "lexer.ml"

  | 10 ->
# 71 "lexer.mll"
                ( RB )
# 216 "lexer.ml"

  | 11 ->
# 72 "lexer.mll"
                ( PLUS )
# 221 "lexer.ml"

  | 12 ->
# 73 "lexer.mll"
                ( MINUS )
# 226 "lexer.ml"

  | 13 ->
# 74 "lexer.mll"
                ( DIV )
# 231 "lexer.ml"

  | 14 ->
# 75 "lexer.mll"
                ( MUL )
# 236 "lexer.ml"

  | 15 ->
# 76 "lexer.mll"
                ( EQ )
# 241 "lexer.ml"

  | 16 ->
# 77 "lexer.mll"
                ( CMP Beq )
# 246 "lexer.ml"

  | 17 ->
# 78 "lexer.mll"
                ( CMP Bneq )
# 251 "lexer.ml"

  | 18 ->
# 79 "lexer.mll"
                ( CMP Blt )
# 256 "lexer.ml"

  | 19 ->
# 80 "lexer.mll"
                ( CMP Bleq )
# 261 "lexer.ml"

  | 20 ->
# 81 "lexer.mll"
                ( CMP Bgt )
# 266 "lexer.ml"

  | 21 ->
# 82 "lexer.mll"
                ( CMP Bgeq )
# 271 "lexer.ml"

  | 22 ->
# 83 "lexer.mll"
                ( NOT )
# 276 "lexer.ml"

  | 23 ->
# 84 "lexer.mll"
                ( AND )
# 281 "lexer.ml"

  | 24 ->
# 85 "lexer.mll"
                ( OR )
# 286 "lexer.ml"

  | 25 ->
let
# 86 "lexer.mll"
             s
# 292 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 86 "lexer.mll"
                ( CONST (Cint (int_of_string s)) )
# 296 "lexer.ml"

  | 26 ->
# 87 "lexer.mll"
                ( EOF )
# 301 "lexer.ml"

  | 27 ->
let
# 88 "lexer.mll"
       c
# 307 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 88 "lexer.mll"
                (raise (Lexing_error c) )
# 311 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

