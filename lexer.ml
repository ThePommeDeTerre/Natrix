# 3 "lexer.mll"
 
  open Lexing
  open Parser

  exception Lexing_error of string


  (* 
  TODO: guardar tabela de keywords numa hashtable *)
  let kwd_tbl = [
    "def",     DEF;
    "if",      IF;
    "then",    THEN;
    "else",    ELSE;
    "print",   PRINT;
    "foreach", FOR;
    "in",      IN;
    "do",      DO;
    "type",    TYPE;
    "var",     VAR;
    "of",      OF;
    "arry",    ARRAY;
    "filled",  FILLED;
    "by",      BY;
    "let",     LET;
    "size",    SIZE;
    "true",    CONST (Cbool true);
    "false",   CONST (Cbool false);
    "int", INT;
    "bool", BOOL
  ]

  exception Lexing_error of char

  let kwd_or_id s = 
  try List.assoc s kwd_tbl with _ -> IDENT s

  let newline lexbuf = 
    let pos = lexbuf.lex_curr_p in 
    lexbuf.lex_curr_p <- {pos with pos_lnum = pos.pos_lnum  + 1; pos_bol = pos.pos_cnum}

# 44 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\224\255\225\255\078\000\227\255\228\255\002\000\003\000\
    \031\000\033\000\237\255\239\255\240\255\241\255\242\255\243\255\
    \244\255\245\255\246\255\034\000\249\255\050\000\251\255\088\000\
    \002\000\099\000\255\255\002\000\003\000\250\255\247\255\235\255\
    \234\255\232\255\230\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\029\000\255\255\255\255\024\000\022\000\
    \026\000\019\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\007\000\255\255\031\000\255\255\003\000\
    \002\000\017\000\255\255\255\255\001\000\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\000\000\000\000\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\255\255\000\000\255\255\
    \255\255\255\255\000\000\028\000\028\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\024\000\026\000\024\000\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \024\000\008\000\024\000\000\000\000\000\000\000\005\000\000\000\
    \018\000\017\000\010\000\012\000\020\000\011\000\021\000\025\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\019\000\022\000\007\000\009\000\006\000\034\000\
    \033\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\014\000\032\000\013\000\031\000\030\000\
    \029\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\016\000\004\000\015\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\027\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\024\000\027\000\028\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\024\000\255\255\255\255\255\255\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
    \007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\008\000\000\000\009\000\019\000\
    \021\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\025\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\027\000\028\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 53 "lexer.mll"
                ( newline lexbuf; token lexbuf )
# 177 "lexer.ml"

  | 1 ->
# 54 "lexer.mll"
                ( newline lexbuf; token lexbuf )
# 182 "lexer.ml"

  | 2 ->
# 55 "lexer.mll"
                ( token lexbuf )
# 187 "lexer.ml"

  | 3 ->
let
# 56 "lexer.mll"
           id
# 193 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 56 "lexer.mll"
                ( kwd_or_id )
# 197 "lexer.ml"

  | 4 ->
# 57 "lexer.mll"
                ( SCOL )
# 202 "lexer.ml"

  | 5 ->
# 58 "lexer.mll"
                ( RANGE )
# 207 "lexer.ml"

  | 6 ->
# 59 "lexer.mll"
                ( COM )
# 212 "lexer.ml"

  | 7 ->
# 60 "lexer.mll"
                ( COL )
# 217 "lexer.ml"

  | 8 ->
# 61 "lexer.mll"
                ( SET )
# 222 "lexer.ml"

  | 9 ->
# 62 "lexer.mll"
                ( LP )
# 227 "lexer.ml"

  | 10 ->
# 63 "lexer.mll"
                ( RP )
# 232 "lexer.ml"

  | 11 ->
# 64 "lexer.mll"
                ( LB )
# 237 "lexer.ml"

  | 12 ->
# 65 "lexer.mll"
                ( RB )
# 242 "lexer.ml"

  | 13 ->
# 66 "lexer.mll"
                ( SLB )
# 247 "lexer.ml"

  | 14 ->
# 67 "lexer.mll"
                ( SRB )
# 252 "lexer.ml"

  | 15 ->
# 68 "lexer.mll"
                ( PLUS )
# 257 "lexer.ml"

  | 16 ->
# 69 "lexer.mll"
                ( MINUS )
# 262 "lexer.ml"

  | 17 ->
# 70 "lexer.mll"
                ( DIV )
# 267 "lexer.ml"

  | 18 ->
# 71 "lexer.mll"
                ( MUL )
# 272 "lexer.ml"

  | 19 ->
# 72 "lexer.mll"
                ( EQ )
# 277 "lexer.ml"

  | 20 ->
# 73 "lexer.mll"
                ( CMP Beq )
# 282 "lexer.ml"

  | 21 ->
# 74 "lexer.mll"
                ( CMP Bneq )
# 287 "lexer.ml"

  | 22 ->
# 75 "lexer.mll"
                ( CMP Blt )
# 292 "lexer.ml"

  | 23 ->
# 76 "lexer.mll"
                ( CMP Bleq )
# 297 "lexer.ml"

  | 24 ->
# 77 "lexer.mll"
                ( CMP Bgt )
# 302 "lexer.ml"

  | 25 ->
# 78 "lexer.mll"
                ( CMP Bgeq )
# 307 "lexer.ml"

  | 26 ->
# 79 "lexer.mll"
                ( NOT )
# 312 "lexer.ml"

  | 27 ->
# 80 "lexer.mll"
                ( AND )
# 317 "lexer.ml"

  | 28 ->
# 81 "lexer.mll"
                ( OR )
# 322 "lexer.ml"

  | 29 ->
let
# 82 "lexer.mll"
             s
# 328 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 82 "lexer.mll"
                ( CONST (Cint int_of_string s) )
# 332 "lexer.ml"

  | 30 ->
# 83 "lexer.mll"
                ( EOF )
# 337 "lexer.ml"

  | 31 ->
let
# 84 "lexer.mll"
       c
# 343 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 84 "lexer.mll"
                (raise (Lexing_error c) )
# 347 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

